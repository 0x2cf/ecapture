name: GO/C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-on-ubuntu2004:
    runs-on: ubuntu-20.04
    name: build on ubuntu-20.04 x86_64
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.17.4'
      - name: Install Compilers
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential pkgconf libelf-dev llvm-12 clang-12 linux-tools-common linux-tools-generic
          for tool in "clang" "llc" "llvm-strip"
          do
            sudo rm -f /usr/bin/$tool
            sudo ln -s /usr/bin/$tool-12 /usr/bin/$tool
          done
        shell: bash
      - uses: actions/checkout@v3
      - name: Build
        run: |
          make clean
          make env
          make
      - name: Build NOCORE
        run: |
          make clean
          make env
          make nocore
      - name: Test
        run: go test -v ./...

  build-on-ubuntu2204:
    runs-on: ubuntu-22.04
    name: build on ubuntu-22.04 x86_64
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.17.4'
      - name: Install Compilers
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential pkgconf libelf-dev llvm-14 clang-14 linux-tools-common linux-tools-generic
          for tool in "clang" "llc" "llvm-strip"
          do
            sudo rm -f /usr/bin/$tool
            sudo ln -s /usr/bin/$tool-14 /usr/bin/$tool
          done
        shell: bash
      - uses: actions/checkout@v3
      - name: Build
        run: |
          make clean
          make env
          make
      - name: Build NOCORE
        run: |
          make clean
          make env
          make nocore
      - name: Test
        run: go test -v ./...

  build-on-ubuntu2204-arm64:
    runs-on: ubuntu-22.04
    name: build on ubuntu-22.04 arm64
    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
    steps:
      - uses: actions/checkout@v3
        with:
          set-safe-directory: '/source_code'
      - name: Branch Name
        run: |
          echo running on branch ${{ github.ref_name }}
          echo checkout directory ${GITHUB_WORKSPACE}
          echo PWD directory ${PWD}
      - name: Write File
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ./bin/release_notes.txt
          contents: |
            "just for CI"
          write-mode: append
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --volume "${GITHUB_WORKSPACE}:/source_code"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: ecapture-${{ steps.get_tags.outputs.VERSION }}-linux-${{ matrix.arch }}.tar.gz

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            uname -a
            apt-get update
            apt-get install --yes wget git golang build-essential pkgconf libelf-dev llvm-14 clang-14  linux-tools-generic linux-tools-common
          # Produce a binary artifact and place it in the mounted volume
          run: |
            uname -a
            date
            export PATH=$PATH:/usr/local/bin
            for tool in "clang" "llc" "llvm-strip"
            do
            rm -f /usr/bin/$tool
            ln -s /usr/bin/$tool-14 /usr/bin/$tool
            done
            clang --version
            which bpftool
            git config --global --add safe.directory /source_code
            echo "-------------------Makefile ecapture -------------------"
            cd /source_code
            make env
            make clean
            make
            echo "-------------------ecapture --help-------------------"
            bin/ecapture -h
            echo "-------------------create tar.gz file-------------------"
            UNAME_M=`uname -m`
            OUTPUT_DIR="./bin"
            SNAPSHOT_VERSION=${{ steps.get_tags.outputs.VERSION }}
            TAR_DIR=ecapture-${SNAPSHOT_VERSION}-linux-${UNAME_M}
            RELEASE_NOTES=${OUTPUT_DIR}/release_notes.txt
            OUT_ARCHIVE=${OUTPUT_DIR}/${artifact_name}
            OUT_CHECKSUMS=${OUTPUT_DIR}/checksum-${SNAPSHOT_VERSION}.txt
            mkdir -p ${TAR_DIR}
            cp LICENSE ${TAR_DIR}/LICENSE
            cp CHANGELOG.md ${TAR_DIR}/CHANGELOG.md
            cp README.md ${TAR_DIR}/README.md
            cp README_CN.md ${TAR_DIR}/README_CN.md
            cp ${OUTPUT_DIR}/ecapture ${TAR_DIR}/ecapture
            cp ${OUTPUT_DIR}/release_notes.txt ${TAR_DIR}/release_notes.txt
            tar  -czf ${OUT_ARCHIVE} ${TAR_DIR}
            cp ${OUT_ARCHIVE} "/artifacts/"
            go test -v ./...
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"